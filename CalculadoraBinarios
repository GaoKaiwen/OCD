import java.util.Scanner;
import java.util.ArrayList;

class CalculadoraBinarios {

	public static void main(String[] args) {
    		running();
  	}

  	public static void running() {
    		Scanner scan = new Scanner(System.in);
		
    		System.out.println("" +
		"Calculadora de binarios\n" +
    		"Escolha uma operacao:\n" +
    		"1 - Soma de binarios int\n" +
    		"2 - Subtracao de binarios int\n" +
    		"3 - Multiplicacao de binarios int\n" +
    		"4 - Divisao de binarios float\n" +
    		"5 - Soma de binarios float\n" +
    		"6 - Subtracao de binarios float\n" +
    		"7 - Multiplicacao de binarios float\n" +
    		"8 - Divisao de binarios float");
    
    		boolean entradaValida = false;
		int operacao = 0;
    		while(entradaValida = false) {
			operacao = scan.nextInt();
			if(operacao < 1 || operacao > 8) {
				System.out.println("Entrada invalida. Insira novamente.");
				entradaValida = false;
			}
			else entradaValida = true;
    		}
    
    		String num1 = "";
    		String num2 = "";
		int[] numero1 = new int[1];
		int[] numero2 = new int[1];
		int[] resultado = new int[1];
		switch(operacao) {
			case 1: System.out.println("Somando dois binarios inteiros...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.print("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = intToArray(num1);
				numero2 = intToArray(num2);
				if(difTamanhoArr(numero1, numero2) > 0) numero2 = IgualarAoMaiorInt(numero2, numero1.length);
  				else numero1 = IgualarAoMaiorInt(numero1, numero2.length);
				resultado = somaDeInteiros(numero1, numero2);
				break;

			case 2: System.out.println("Subtraindo dois inteiros...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.println("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = intToArray(num1);
				numero2 = intToArray(num2);
				if(difTamanhoArr(numero1, numero2) > 0) numero2 = IgualarAoMaiorInt(numero2, numero1.length);
  				else numero1 = IgualarAoMaiorInt(numero1, numero2.length);
				resultado = subtracaoDeInteiros(numero1, numero2);
				break;

			case 3: System.out.println("Multiplicando dois inteiros...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.println("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = intToArray(num1);
				numero2 = intToArray(num2);
				if(difTamanhoArr(numero1, numero2) > 0) numero2 = IgualarAoMaiorInt(numero2, numero1.length);
  				else numero1 = IgualarAoMaiorInt(numero1, numero2.length);
				resultado = multiplicacaoDeInteiros(numero1, numero2);
				break;
				
			case 4: System.out.println("Dividindo dois inteiros...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.println("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = intToArray(num1);
				numero2 = intToArray(num2);
				if(difTamanhoArr(numero1, numero2) > 0) numero2 = IgualarAoMaiorInt(numero2, numero1.length);
  				else numero1 = IgualarAoMaiorInt(numero1, numero2.length);
				resultado = divisaoDeInteiros(numero1, numero2);
				break;
				
			case 5: System.out.println("Somando dois flutuantes...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.println("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = floatToArray(num1);
				numero2 = floatToArray(num2);
				resultado = somaDeFloats(numero1, numero2);
				break;
				
			case 6: System.out.println("Subtraindo dois flutuantes...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.println("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = floatToArray(num1);
				numero2 = floatToArray(num2);
				resultado = subtracaoDeFloats(numero1, numero2);
				break;
				
			case 7: System.out.println("Multiplicando dois flutuantes...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.println("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = floatToArray(num1);
				numero2 = floatToArray(num2);
				resultado = multiplicacaoDeFloats(numero1, numero2);
				break;
				
			case 8: System.out.println("Dividindo dois flutuantes...");
				System.out.print("Digite o primeiro numero em decimal: ");
				num1 = scan.next();
				System.out.println("\nDigite o segundo numero em decimal: ");
				num2 = scan.next();
				numero1 = floatToArray(num1);
				numero2 = floatToArray(num2);
				resultado = divisaoDeFloats(numero1, numero2);
				break;
		}
		for(int i = 0; i < resultado.length; i++) {
			System.out.print("O resultado e " + resultado[i]);
		}
		System.out.println("\n");
  	}
  	
  	public static int[] intToArray(String numero) {  //Transforma um nÃºmero em arranjo
  		int decimal = Integer.parseInt(numero);
  		if(decimal < 0) decimal = -decimal;
        	ArrayList<Integer> arrAux = new ArrayList<Integer>();
       		int i = 0;
        	while(decimal > 0) {
          		if(decimal%2 == 0) arrAux.add(i, 0);
          		else arrAux.add(i, 1);
          		decimal /= 2;
          		i++;
        	}
        	ArrayList<Integer> binario = new ArrayList<Integer>();
        	if(Integer.parseInt(numero) < 0) binario.add(0, 1);
      		else binario.add(0, 0);
        	int j = arrAux.size() - 1;
        	for(int k = 1; k <= arrAux.size(); k++) {
          		binario.add(k, arrAux.get(j));
          		j--;
        	}
        	int[] saida = new int[binario.size()];
        	for(int k = 0; k < saida.length; k++)
        		saida[k] = binario.get(k);
        	return saida;
  	}

	public static int[] floatToArray(String numero) {
		
  	}

  	public static int[] IgualarAoMaiorInt(int[] a, int tamanhoArray) {
	  	int[] retorno = new int[tamanhoArray];
	
	  	int i;
	  	int j = retorno.length-1;
	  	for(i = a.length-1; i > 0; i--) {
	  		retorno[j] = a[i];
	  		j--;
	  	}
	  	retorno[0] = a[i];
	  	
	  	return retorno;
  	}
	
	public static int[] maiorFloat(int[] a, int tamanhoArray) {
	
	}
	
	public static int difTamanhoArr(int[] a, int[] b) {
  		return a.length - b.length;
  	}

  	public static int[] somaDeInteiros(int[] a, int[] b) {
  		int tamArr = a.length;
  		
  		int[] resposta = new int[tamArr];
  		int[] sobeUm = new int[tamArr];
  		if(a[0] == 0) {
  			if(b[0] == 1) {														//a[0] == 0 && b[0] == 1
  				b[0] = 0;
  				return subtracaoDeInteiros(a, b);
  			}
  			else {																//a[0] == 0 && b[0] == 0
  				for(int i = tamArr-1; i > 0; i--) {					//soma bit por bit
  					if((a[i] == 1 && b[i] == 0) || (a[i] == 0 && b[i] == 1)) {
  						if(sobeUm[i] == 0) resposta[i] = 1;
  						else sobeUm[i-1] = 1;
  					}
  					else {
  						if(a[i] == 1 && b[i] == 1) {
  							if(sobeUm[i] == 0) {
  								resposta[i] = 0;
  								sobeUm[i-1] = 1;
  							}
  							else {
  								resposta[i] = 1;
  								sobeUm[i-1] = 1;
  							}
  						}
  					}
  				}
  				
  				if(sobeUm[0] == 1) {
  					int[] resposta1 = new int[tamArr+1];
  	  				for(int i = 0; i < tamArr; i++) resposta1[i+1] = resposta[i];	//copia de resposta com um bit a mais
  					resposta1[1] = 1;
  					return resposta1;
  				}
  				return resposta;
  			}
  		}
  		else {
  			if(b[0] == 0) {									//a[0] == 1 && b[0] == 0
  				a[0] = 0;
  				return subtracaoDeInteiros(b, a);			
  			}
  			else {										//a[0] == 1 && b[0] == 1
  				for(int i = tamArr; i > 0; i--) {					//soma bit por bit
  					if((a[i] == 1 && b[i] == 0) || (a[i] == 0 && b[i] == 1)) {
  						if(sobeUm[i] == 0) resposta[i] = 1;
  						else sobeUm[i-1] = 1;
  					}
  					else {
  						if(a[i] == 1 && b[i] == 1) {
  							if(sobeUm[i] == 0) {
  								resposta[i] = 0;
  								sobeUm[i-1] = 1;
  							}
  							else {
  								resposta[i] = 1;
  								sobeUm[i-1] = 1;
  							}
  						}
  					}
  				}
  				
  				if(sobeUm[0] == 1) {
  					int[] resposta1 = new int[tamArr+1];
  	  				for(int i = 0; i < tamArr; i++) resposta1[i+1] = resposta[i];	//copia de resposta com um bit a mais
  					resposta1[1] = 1;
  					resposta1[0] = 1;
  					return resposta1;
  				}
  				resposta[0] = 1;
  				return resposta;
  			}
  		}
  	}
  	
  	public static int[] complemento2Int(int[] a) {
  		int[] retorno = new int[a.length];
  		
  		for(int i = 0; i < a.length; i++) {
  			if(a[i] == 1) retorno[i] = 0;
  			else retorno[i] = 1;
  		}
  		
  		for(int i = a.length-1; i > 0; i--) {
  			if(retorno[i] == 0) {
  				retorno[i] = 1;
  				break;
  			}
  			else retorno[i] = 0;
  		}
  		return retorno;
  	}
  	
  	public static int valorInt(int[] a) {
  		int resposta = 0;
  		for(int i = 0; i < a.length; i++) resposta += Math.pow(10,i) * a[a.length - i - 1];
  		return resposta;
  	}
  	
  	public static int[] subtracaoDeInteiros(int[] a, int[] b) {
  		int tamArr = a.length;
  		
  		int[] resposta = new int[tamArr];
  		int[] resposta1 = new int[tamArr];
  		if(a[0] == 0) {
  			if(b[0] == 1) {									//a[0] == 0 && b[0] == 1
  				b[0] = 0;
  				return somaDeInteiros(a, b);
  			}
  			else {										//a[0] == 0 && b[0] == 0
  				if(valorInt(a) >= valorInt(b)) {
  					b[0] = 1;
  					b = complemento2Int(b);
  					resposta = somaDeInteiros(a, b);
  					if(resposta.length == resposta1.length) return resposta;
  					for(int i = tamArr-1; i > 0 ; i--) resposta1[i] = resposta[i+1];
  					return resposta1;
  				}
  				else {
  					resposta = subtracaoDeInteiros(b, a);
  					resposta[0] = 1;
  					return resposta;
  				}
  			}
  		}
  		else {
  			if(b[0] == 0) {									//a[0] == 1 && b[0] == 0
  				b[0] = 1;
  				return somaDeInteiros(a, b);
  			}
  			else {										//a[0] == 1 && b[0] == 1
  				a[0] = 0;
  				b[0] = 0;
  				return subtracaoDeInteiros(b, a);
  			}
  		}
  	}
	
	public static int[] multiplicacaoDeInteiros(int[] m, int[] q) { //Booth's algorithm
		int[] array = new int[m.length*2 + 1]; //Inicializacao
		int[] a = new int[m.length];
		
		for(int i = 0; i < a.length; i++) {
			a[i] = 0;
		}
		for(int i = 0; i < m.length; i++) {
			array[i] = 0;
		}
		int z = 0;
		for(int i = m.length; i < m.length*2; i++) {
			array[i] = q[z];
			z++;
		}
		array[array.length-1] = 0;
		/////////////////////////////////////// Fim na inicializacao
		for(int i = 0; i < m.length; i++) {
			if(array[m.length-2] < array[m.length-1]) {
				a = somaDeInteiros(a, m);
				for(int j = 0; j < a.length; j++) {
					array[j] = a[j];
				}
			}
			if(array[m.length-2] > array[m.length-1]) {
				a = subtracaoDeInteiros(a, m);
				for(int j = 0; j < a.length; j++) {
					array[j] = a[j];
				}
			}
			for(int j = array.length - 1; j > 0; j++) //shifting
				array[j] = array[j-1];
			array[0] = array[1];
		}
		int[] retorno = new int[array.length-1];
		for(int i = 0; i < array.length-1; i++)
			retorno[i] = array[i];
		return retorno;
	}
	
	public static int[] divisaoDeInteiros(int[] a, int[] c) {
	
	}
	
	public static int[] somaDeFloats(int[] a, int[] b) {
	  	
  	}
	
	public static int[] subtracaoDeFloats(int[] a, int[] b) {
	  	
  	}
	
	public static int[] multiplicacaoDeFloats(int[] a, int[] b) {
	  	
  	}
	
	public static int[] divisaoDeFloats(int[] a, int[] b) {
	  	
  	}
}
